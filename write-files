#!/bin/sh

usage() {
  printf "
\tNo parameters       Link config files
\t-i | --install      Previous actions AND install, clone and update
\t-r | --repository   Previous actions AND add repositories
\t-y | --yes          YES! YES! YES! dot JoJo
\t-h | --help         Literally this\n"
}

INSTALL=false
REPOSITORY=false
YES=false

while [ "$1" != "" ]; do
    case $1 in
        -i | --install )        INSTALL=true
                                ;;
        -r | --repository )     INSTALL=true; REPOSITORY=true
                                ;;
        -y | --yes )            YES=true
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

for FOLDERS in $(find . -type d -not -path "*/.git/*" -not -name ".git" | sed -e "s/^\.//g")
do
  printf "Creating folder %s..." "$FOLDERS"
  FOLDER_PATH="$HOME""$FOLDERS"
  if [ -d "$FOLDER_PATH" ]
  then
    printf "already exists"
  else
    mkdir -p FOLDER_PATH
    printf "created"
  fi
  printf "\n"
done

for RELATIVE_PATH in $(find . -type f -not -path "*/.git/*" -not -name "write-files" | sed -e "s/^\.//g")
do
  SYMLINK=$HOME""$RELATIVE_PATH
  ACTUAL_FILE=$PWD""$RELATIVE_PATH
  CURRENTSYMLINKTARGET=""
  ANSWER="n"

  printf "\nCurrently: %s" "$RELATIVE_PATH"

  if [ ! -f "$SYMLINK" ]
  then
    printf "\n%s already exists and will be overwritten if a symlink is created" "$FULLPATH"
  elif [ -L "$SYMLINK" ]
  then
    CURRENTSYMLINKTARGET="$(readlink -f "$SYMLINK")"
  fi

  if [ -n "$CURRENTSYMLINKTARGET" ]
  then
    if [ "$ACTUAL_FILE" = "$CURRENTSYMLINKTARGET" ]
    then
      printf "\nCorrectly symlinked already\n"
      continue
    else
      printf "\nCurrent symlink points to %s" "$CURRENTSYMLINKTARGET"
    fi
  fi

  printf "\nSymlink %s ?(y/n)\n" "$RELATIVE_PATH"
  if [ "$YES" = "false" ] || [ "$ANSWER" = "y" ]
  then
    read -r ANSWER
  else
    ANSWER="y"
  fi
  if [ "$ANSWER" = "y" ]
  then
    # mkdir -p FPATH
    # TODO: Create directories if needed
    ln -sfv "$ACTUAL_FILE" "$SYMLINK"
  fi
done

if [ "$INSTALL" = "false" ]
then
  exit
fi

if [ -d ~/.vim/ ]; then
  echo "Updating .vim"
  cd ~/.vim/ || return
  git pull -r
else
  echo "Cloning .vim"
  cd ~ || return
  mkdir .vim
  cd .vim || return
  git init
  git remote add origin https://github.com/alexisquintero/.vim
  git fetch
  git checkout -t origin/master
fi

if [ -d ~/.config/i3/ ]; then
  cd ~/.config/i3/ || return
  if [ -d i3scripts/ ]; then
    echo "updating i3scripts"
    cd i3scripts/ || return
    git pull -r
  else
    echo "cloning i3scripts"
    mkdir i3scripts
    cd i3scripts/ || return
    git init
    git remote add origin https://github.com/alexisquintero/i3scripts
    git fetch
    git checkout -t origin/master
  fi
  chmod +x ~/.config/i3/i3scripts/autoname_workspaces.py
  chmod +x ~/.config/i3/i3scripts/util.py
else
  echo "i3config doesn't exist"
fi

if [ "$REPOSITORY" = "true" ]
then
  sudo add-apt-repository ppa:papirus/papirus
fi

curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin # Keeteh
mkdir -p ~/.nvim/nightly
wget -O ~/.nvim/nvim.appimage https://github.com/neovim/neovim/releases/download/v0.3.8/nvim.appimage
chmod u+x ~/.nvim/nvim.appimage
wget -O ~/.nvim/nightly/nvim.appimage https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
chmod u+x ~/.nvim/nightly/nvim.appimage
sudo apt-get update
sudo apt-get install silversearcher-ag
sudo apt-get install xorg
sudo apt-get install fonts-font-awesome
pip3 install i3ipc
pip3 install fontawesome
sudo apt-get install arc-theme
sudo apt-get install papirus-icon-theme
